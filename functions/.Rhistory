setwd(dirname(getSourceEditorContext()$path))
tbl_ULC_incrs %>% head()
tbl_urban_pop_incrs
tbl_urban_pop_incrs %>% head()
tbl_urban_pop_incrs
tbl_urban_pop_incrs %>% head()
# Calculate Urban Land (km2) resulting from increases in GDPC and Urban Pop
tbl_urban_pop_incrs <- merge(tbl_pop_urb_2015, tbl_pop_urb, by = 'REGION') %>%
dplyr::mutate(urban_pop_incrs = urban_pop - urban_pop_2015) %>%
dplyr::select(-UN_A3, ADMIN)
tbl_ULC_incrs <- merge(tbl_gdpc_2015, tbl_gdpc, by = 'REGION') %>%
dplyr::mutate(GDPC_incrs = GDPC - GDPC_2015) %>%
dplyr::mutate(ULC_incrs = GDPC_incrs * coef_gdpc)
tbl_ULC_incrs %>% head()
tbl_urban_pop_incrs %>% head()
# Calculate Urban Land (km2) resulting from increases in GDPC and Urban Pop
tbl_urban_pop_incrs <- merge(tbl_pop_urb_2015, tbl_pop_urb, by = 'REGION') %>%
dplyr::mutate(urban_pop_incrs = urban_pop - urban_pop_2015) %>%
dplyr::select(-UN_A3, -ADMIN)
tbl_ULC_incrs <- merge(tbl_gdpc_2015, tbl_gdpc, by = 'REGION') %>%
dplyr::mutate(GDPC_incrs = GDPC - GDPC_2015) %>%
dplyr::mutate(ULC_incrs = GDPC_incrs * coef_gdpc)
tbl_ULC_incrs %>% head()
tbl_urban_pop_incrs %>% head()
merge(
tbl_ULC_incrs,
tbl_urban_pop_incrs
)
merge(
tbl_ULC_incrs,
tbl_urban_pop_incrs
) %>% head()
tbl_ULC_incrs %>% head()
tbl_urban_pop_incrs %>% head()
tbl_urban_land_2015
tbl_urban_pop_incrs %>% head()
tbl_ULC_incrs %>% head()
tbl_urban_land_2015 %>% head()
tbl_urban_land_2015 %>%
merge(urban_pop_incrs, by = 'REGION')
tbl_urban_land_2015 %>%
merge(urban_pop_incrs, by = 'REGION') %>% head()
tbl_urban_pop_incrs %>% head()
tbl_ULC_incrs %>% head()
tbl_urban_land_2015 %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>% head()
tbl_urban_land_2015 %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>% head()
tbl_urban_land_2015
tbl_ulc_2015
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION')
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>% head()
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(
urban_land_incrs = (ULC_2015+ULC_incrs) * (urban_pop_2015+urban_pop_incrs)) %>% head()
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(
urban_land_incrs = (ULC_2015+ULC_incrs) * (urban_pop_2015+urban_pop_incrs)) %>%
dplyr::mutate(urban_land = urb_land_2015 + urban_land_incrs)
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(
urban_land_incrs = (ULC_2015+ULC_incrs) * (urban_pop_2015+urban_pop_incrs)) %>%
dplyr::mutate(urban_land = urb_land_2015 + urban_land_incrs) %>% head()
tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(
urban_land_incrs = (ULC_2015+ULC_incrs) * (urban_pop_2015+urban_pop_incrs)) %>%
dplyr::mutate(urban_land = urb_land_2015 + urban_land_incrs) %>% head()
tbl_urban_land <- tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(
urban_land_incrs = (ULC_2015+ULC_incrs) * (urban_pop_2015+urban_pop_incrs)) %>%
dplyr::mutate(urban_land = urb_land_2015 + urban_land_incrs)
# Output Urban Land (km2)
tbl_urban_land %>%
readr::write_csv(file.path('..', 'results', 'urban_land.csv'))
coef_gdpc
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
tbl_urb_pop_dens_2015
tbl_urb_pop_dens_2015 %>% filter(REGION=='BGD')
tbl_ulc_2015
tbl_ulc_2015 %>% filter(REGION=='BGD')
tbl_urban_pop_incrs
tbl_urban_pop_incrs %>% filter(REGION=='BGD')
tbl_pop_urb_2015
tbl_pop_urb_2015 %>% filter(REGION=='BGD')
tbl_pop_urb_2015
readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16) %>%
dplyr::select(UN_A3 = `Country\ncode`, urban_pop_2015 = `2015`)
readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16) %>%
dplyr::select(UN_A3 = `Country\ncode`, urban_pop_2015 = `2015`) %>%
# Convert urban population from thousands to millions
dplyr::mutate(urban_pop_2015 = urban_pop_2015 / 1000) %>%
merge(countries, by = 'UN_A3')
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(REGION = ADM0_A3, ADMIN, UN_A3) %>%
sf::st_set_geometry(NULL)
tbl_pop_urb_2015 <- readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16) %>%
dplyr::select(UN_A3 = `Country\ncode`, urban_pop_2015 = `2015`) %>%
# Convert urban population from thousands to millions
dplyr::mutate(urban_pop_2015 = urban_pop_2015 / 1000) %>%
merge(countries, by = 'UN_A3')
tbl_pop_urb_2015$urban_pop_2015 %>% summary()
readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16)
tbl_pop_urb_2015
tbl_pop_urb_2015 %>% filter(REGION=='BGD')
tbl_pop_urb_2015 %>% filter(REGION=='CHN')
readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16)
countries
countries %>% filter(REGION=='BGD')
paste(50,3,pad='0')
library(stringr)
tbl_pop_urb_2015 <- readxl::read_xls(
file.path('..', 'data', 'WUP2018-F03-Urban_Population.xls'), skip = 16) %>%
dplyr::select(`Country\ncode`, urban_pop_2015 = `2015`) %>%
dplyr::mutate(UN_A3 = stringr::str_pad(`Country\ncode`, 3, pad = '0')) %>%
# Convert urban population from thousands to millions
dplyr::mutate(urban_pop_2015 = urban_pop_2015 / 1000) %>%
merge(countries, by = 'UN_A3')
tbl_pop_urb_2015
tbl_pop_urb_2015$UN_A3
tbl_pop_urb_2015 %>% filter(REGION=='BGD')
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
tbl_urban_land <- tbl_urban_land_2015 %>%
merge(tbl_ulc_2015, by = 'REGION') %>%
merge(tbl_urban_pop_incrs, by = 'REGION') %>%
merge(tbl_ULC_incrs, by = c('REGION','SCENARIO','year')) %>%
dplyr::mutate(ULC = ULC_2015 + ULC_incrs) %>%
dplyr::mutate(urban_land = ULC * urban_pop)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
tbl_urb_pop_dens
tbl_urban_land_2015
tbl_urban_pop
tbl_urban_pop %>% head()
tbl_pop_urb_2015
tbl_pop_urb_2015 %>% head()
tbl_urban_land_2015 %>%
merge(tbl_pop_urb_2015, by = 'REGION')
tbl_urban_land_2015 %>%
merge(tbl_pop_urb_2015, by = 'REGION') %>% head()
# Convert urban population density (persons/km2) to urban land / cap (km2/mil)
tbl_ulc_2015 <- tbl_urban_land_2015 %>%
merge(tbl_pop_urb_2015, by = 'REGION') %>%
dplyr::mutate(ULC_2015 = urb_land_2015 / urban_pop_2015)
tbl_ulc_2015
tbl_ulc_2015 %>% head()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
# Output Urban Land (km2)
tbl_urban_land %>%
readr::write_csv(file.path('..', 'results', 'urban_land.csv'))
tbl_ulc_2015
tbl_ulc_2015 %>% head()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
tbl_urban_land
tbl_urban_land %>% head()
tbl_urban_land_2015
tbl_ulc_2015
tbl_urban_pop_incrs
tbl_urban_pop_incrs %>% head()
# Calculate Urban Land (km2) resulting from increases in GDPC and Urban Pop
tbl_urban_pop_incrs <- merge(tbl_pop_urb_2015, tbl_pop_urb, by = 'REGION') %>%
dplyr::mutate(urban_pop_incrs = urban_pop - urban_pop_2015) %>%
dplyr::select(-UN_A3, -ADMIN, -`Country\ncode`)
tbl_urban_pop_incrs %>% head()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_quantities.R", echo=TRUE)
library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(fasterize)
library(rstudioapi)
library(rnaturalearth)
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN, UN_A3)
countries %>% filter(ADM0_A3=='SLB')
countries %>% filter(ADM0_A3=='SLB') %>% plot()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
countries %>% filter(ADM0_A3=='SLB') %>% st_buffer(10000)
countries %>% filter(ADM0_A3=='SLB') %>% st_buffer(10000) %>% plot()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
country
country %>% plot()
mask_ctry %>% plot()
urban_ctry_2015
suit_ctry
urban_ctry_2015
urban_ctry_2015 %>% plot()
suit_ctry %>% plot()
suitability
suit_ctry
suit_ctry %>% plot()
mask_ctry %>% plot()
suit_ctry
suit_ctry %>% plot()
# Export urban suitability of the country
raster::writeRaster(suit_ctry, overwrite=T,
filename=file.path('..', 'results', iso, 'suitability.tif'))
library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(fasterize)
library(rstudioapi)
library(rnaturalearth)
library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(fasterize)
library(rstudioapi)
library(rnaturalearth)
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN, UN_A3)
# Load urban land cover in 2015 from GHSL
smod_2015 <- raster(
file.path('..', 'data',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0.tif'))
smod_2015
# Load urban suitability (global coverage)
suitability <- raster(file.path('..', 'data', 'suitability', 'suitability_pca2_excluded.tif'))
suitability[is.na(suitability)] <- 0
# Load Urban Land (km2) projections
tbl_urban_land <- readr::read_csv(file.path('..', 'results', 'urban_land.csv'), show_col_types = F)
# List of countries available in urban land projections
lst_countries <- unique(tbl_urban_land$REGION)
# Select countries for demo
# lst_countries <- c('CHN', 'IND', 'USA', 'FRA', 'RUS')
# Select countries for debug
# lst_countries <- c('ARE', 'ISR', 'NGA', 'PSE', 'QAT', 'BGD', 'NZL')
lst_countries <- c('SLB', 'MWI', 'MDG')
# Loop through countries
for (iso in lst_countries) {
# Print country name
print(paste('Processing', iso))
# Select and re-project country polygons
country <- countries %>%
dplyr::filter(ADM0_A3==iso) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
# Remove eastern pacific islands from Russia
if(iso=='RUS') {
rus_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(rus_polygons)
rus_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- rus_polygons %>%
dplyr::filter(ct_long > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove French Guiana from France
if(iso=='FRA') {
fra_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(fra_polygons)
fra_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
fra_polygons$ct_lat  <- sf::st_coordinates(usa_centroids)[,2]
country <- fra_polygons %>%
dplyr::filter(ct_long > 0 & ct_lat > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove eastern pacific parts from USA
if(iso=='USA') {
usa_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(usa_polygons)
usa_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- usa_polygons %>%
dplyr::filter(ct_long < 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove islands in western hemisphere from New Zealand
if(iso=='NZL') {
nzl_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(nzl_polygons)
nzl_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- nzl_polygons %>%
dplyr::filter(ct_long > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Add Hong Kong, Macau, Taiwan to China
if(iso=='CHN') {
country <- countries %>%
dplyr::filter(ADM0_A3 %in% c('CHN','MAC','HKG','TWN')) %>%
dplyr::summarise() %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
}
# Buffer Solomon Islands by 1km
if(iso=='SLB') {
country <- st_buffer(country, dist = 1000)
}
# Output folder
path_ctry <- file.path('..', 'results', iso)
if(nrow(country)>0 & !dir.exists(path_ctry)) {
# Create mask for the country
mask_ctry <- country %>%
fasterize::fasterize(smod_2015) %>%
raster::crop(country)
# Crop the global SMOD layer to the country
smod_ctry_2015 <- smod_2015 %>%
raster::crop(mask_ctry) %>%
raster::mask(mask_ctry)
# Mark urban center (30) and dense urban cluster (23) as urban lands
urban_ctry_2015 <- (smod_ctry_2015>=23)
# Interpolate suitability to the country
suit_ctry <- suitability %>%
raster::resample(urban_ctry_2015, method='bilinear') %>%
# raster::mask(suitability) %>%
raster::mask(mask_ctry)
# Create directory for the country
dir.create(file.path('..', 'results', iso))
# Export urban land of the country in 2015
raster::writeRaster(urban_ctry_2015, overwrite=T,
filename=file.path('..', 'results', iso, 'urban_2015.tif'))
# Export urban suitability of the country
raster::writeRaster(suit_ctry, overwrite=T,
filename=file.path('..', 'results', iso, 'suitability.tif'))
}
}
library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(fasterize)
library(rstudioapi)
library(rnaturalearth)
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
st_crs('EPSG:6933')
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN, UN_A3)
# Load urban land cover in 2015 from GHSL
smod_2015 <- raster(
file.path('..', 'data',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0.tif'))
# Load urban suitability (global coverage)
suitability <- raster(file.path('..', 'data', 'suitability', 'suitability_pca2_excluded.tif'))
suitability[is.na(suitability)] <- 0
# Load Urban Land (km2) projections
tbl_urban_land <- readr::read_csv(file.path('..', 'results', 'urban_land.csv'), show_col_types = F)
# List of countries available in urban land projections
lst_countries <- unique(tbl_urban_land$REGION)
## Select countries for demo / debug
# lst_countries <- c('CHN', 'IND', 'USA', 'FRA', 'RUS')
# Select countries for debug
# lst_countries <- c('ARE', 'ISR', 'NGA', 'PSE', 'QAT', 'BGD', 'NZL')
lst_countries <- c('SLB', 'MWI', 'MDG')
for (iso in lst_countries) {
}
# Print country name
print(paste('Processing', iso))
# Select and re-project country polygons
country <- countries %>%
dplyr::filter(ADM0_A3==iso) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
country
# Remove eastern pacific islands from Russia
if(iso=='RUS') {
rus_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(rus_polygons)
rus_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- rus_polygons %>%
dplyr::filter(ct_long > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove French Guiana from France
if(iso=='FRA') {
fra_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(fra_polygons)
fra_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
fra_polygons$ct_lat  <- sf::st_coordinates(usa_centroids)[,2]
country <- fra_polygons %>%
dplyr::filter(ct_long > 0 & ct_lat > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove eastern pacific parts from USA
if(iso=='USA') {
usa_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(usa_polygons)
usa_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- usa_polygons %>%
dplyr::filter(ct_long < 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Remove islands in western hemisphere from New Zealand
if(iso=='NZL') {
nzl_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(nzl_polygons)
nzl_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- nzl_polygons %>%
dplyr::filter(ct_long > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
# Add Hong Kong, Macau, Taiwan to China
if(iso=='CHN') {
country <- countries %>%
dplyr::filter(ADM0_A3 %in% c('CHN','MAC','HKG','TWN')) %>%
dplyr::summarise() %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
}
# Buffer Solomon Islands by 1km
if(iso=='SLB') {
country <- st_buffer(country, dist = 1000)
}
# Output folder
path_ctry <- file.path('..', 'results', iso)
# Create mask for the country
mask_ctry <- country %>%
fasterize::fasterize(smod_2015) %>%
raster::crop(country)
# Crop the global SMOD layer to the country
smod_ctry_2015 <- smod_2015 %>%
raster::crop(mask_ctry) %>%
raster::mask(mask_ctry)
# Mark urban center (30) and dense urban cluster (23) as urban lands
urban_ctry_2015 <- (smod_ctry_2015>=23)
# Interpolate suitability to the country
suit_ctry <- suitability %>%
raster::resample(urban_ctry_2015, method='bilinear') %>%
# raster::mask(suitability) %>%
raster::mask(mask_ctry)
# Create directory for the country
dir.create(file.path('..', 'results', iso))
plot(urban_ctry_2015)
urban_ctry_2015 %>% raster::projectRaster(crs = 'EPSG:6933') %>% plot()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
urban_ctry_2015 %>%
raster::projectRaster(crs = 'EPSG:6933')
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
urban_ctry_2015
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017_URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
