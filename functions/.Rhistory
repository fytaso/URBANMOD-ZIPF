library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(fasterize)
library(rstudioapi)
library(rnaturalearth)
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN)
# Load urban land cover in 2015 from GHSL
smod_2015 <- raster(
file.path('..', 'data',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0.tif'))
# Load urban suitability (global coverage)
suitability <- raster(file.path('..', 'data', 'suitability', 'suitability_pca2_excluded.tif'))
# Load Urban Land (km2) projections
tbl_urban_land <- readr::read_csv(file.path('..', 'results', 'urban_land.csv'), show_col_types = F)
# List of countries available in urban land projections
lst_countries <- unique(tbl_urban_land$REGION)
lst_countries
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017 URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
countries
country
country %>% plot()
country %>% geometry()
country$geometry
country$geometry %>% plot()
country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
iso
iso=='RUS'
if(iso=='RUS') {
rus_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(rus_polygons)
rus_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
country <- rus_polygons %>%
dplyr::filter(ct_long > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
country
country$geometry %>% plot()
iso <- 'FRA'
# Select and re-project country polygons
country <- countries %>%
dplyr::filter(ADM0_A3==iso) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
country$geometry %>% plot()
# Remove FG from France
if(iso=='FRA') {
fra_polygons <- country %>%
sf::st_cast('POLYGON') %>%
sf::st_transform(crs = 'WGS84')
usa_centroids <- sf::st_centroid(fra_polygons)
fra_polygons$ct_long <- sf::st_coordinates(usa_centroids)[,1]
fra_polygons$ct_lat  <- sf::st_coordinates(usa_centroids)[,2]
country <- fra_polygons %>%
dplyr::filter(ct_long > 0 & ct_lat > 0) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs') %>%
dplyr::group_by(ADM0_A3) %>%
dplyr::summarise()
}
country$geometry %>% plot()
source("/Volumes/GoogleDrive/My Drive/Research_Projects/2017 URBANMOD-ZIPF/v3/URBANMOD-ZIPF/functions/urban_land_setup.R", echo=TRUE)
library(raster)
library(fasterize)
install.packages("shiny")
install.packages("learnr")
# This script calculates the average population density in urban areas for each country.
library(sf)
library(rgdal)
library(dplyr)
library(raster)
library(rnaturalearth)
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
<<<<<<< HEAD
# Download GHS-POP layer
download.file('https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_MT_GLOBE_R2019A/GHS_POP_E2015_GLOBE_R2019A_54009_1K/V1-0/GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0.zip',
destfile = file.path('..', 'data', 'GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0.zip'))
dir.create(file.path('..', 'data', 'GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0'))
unzip(file.path('..', 'data', 'GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0.zip'),
exdir = file.path('..', 'data', 'GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0'))
=======
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN)
iso <- 'CHN'
# Select and re-project country polygons
country <- countries %>%
dplyr::filter(ADM0_A3==iso) %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
country$geometry %>% plot()
countries$geometry %>% plot()
countries$ADM0_A3 %>% unique()
countries$ADM0_A3 %>% sort()
tbl_urban_land
tbl_urban_land$REGION %>% unique()
countries$ADM0_A3 %>% sort()
country <- countries %>%
dplyr::filter(ADM0_A3=='MAC') %>% plot()
country <- countries %>%
dplyr::filter(ADM0_A3=='KHG') %>% plot()
country <- countries %>%
dplyr::filter(ADM0_A3=='HKG') %>% plot()
country <- countries %>%
dplyr::filter(ADM0_A3=='TWN') %>% plot()
iso
# Add Hong Kong, Macau, Taiwan to China
if(iso=='CHN') {
countries %>%
dplyr::filter(ADM0_A3 %in% c('CHN','MAC','HKG','TWN')) %>%
dplyr::summarise() %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
}
# Add Hong Kong, Macau, Taiwan to China
if(iso=='CHN') {
country <- countries %>%
dplyr::filter(ADM0_A3 %in% c('CHN','MAC','HKG','TWN')) %>%
dplyr::summarise() %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
}
country
country$geometry %>% plot()
# Create mask for the country
mask_ctry <- country %>%
fasterize::fasterize(smod_2015) %>%
raster::crop(country)
# Crop the global SMOD layer to the country
smod_ctry_2015 <- smod_2015 %>%
raster::crop(mask_ctry) %>%
raster::mask(mask_ctry)
# Mark urban center (30) and dense urban cluster (23) as urban lands
urban_ctry_2015 <- (smod_ctry_2015>=23)
# Interpolate suitability to the country
suit_ctry <- suitability %>%
raster::resample(urban_ctry_2015, method='bilinear') %>%
# raster::mask(suitability) %>%
raster::mask(mask_ctry)
# Create directory for the country
dir.create(file.path('..', 'results', iso))
# Export urban land of the country in 2015
raster::writeRaster(urban_ctry_2015, overwrite=T,
filename=file.path('..', 'results', iso, 'urban_2015.tif'))
# Export urban suitability of the country
raster::writeRaster(suit_ctry, overwrite=T,
filename=file.path('..', 'results', iso, 'suitability.tif'))
country <- countries %>%
dplyr::filter(ADM0_A3 %in% c('CHN','MAC','HKG','TWN')) %>%
dplyr::summarise() %>%
sf::st_transform(
crs='+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
country
# Output folder
path_ctry <- file.path('..', 'results', iso)
path_ctry
mask_ctry <- country %>%
fasterize::fasterize(smod_2015) %>%
raster::crop(country)
# Crop the global SMOD layer to the country
smod_ctry_2015 <- smod_2015 %>%
raster::crop(mask_ctry) %>%
raster::mask(mask_ctry)
# Mark urban center (30) and dense urban cluster (23) as urban lands
urban_ctry_2015 <- (smod_ctry_2015>=23)
# Interpolate suitability to the country
suit_ctry <- suitability %>%
raster::resample(urban_ctry_2015, method='bilinear') %>%
# raster::mask(suitability) %>%
raster::mask(mask_ctry)
# Create directory for the country
dir.create(file.path('..', 'results', iso))
# Export urban land of the country in 2015
raster::writeRaster(urban_ctry_2015, overwrite=T,
filename=file.path('..', 'results', iso, 'urban_2015.tif'))
# Export urban suitability of the country
raster::writeRaster(suit_ctry, overwrite=T,
filename=file.path('..', 'results', iso, 'suitability.tif'))
country
country$geometry %>% plot()
# Set working directory to path of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Download country boundaries from Natural Earth
countries <- ne_download(scale = 10, returnclass = 'sf') %>%
dplyr::select(ADM0_A3, ADMIN)
# Load urban land cover in 2015 from GHSL
smod_2015 <- raster(
file.path('..', 'data',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0',
'GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0.tif'))
# Load urban suitability (global coverage)
suitability <- raster(file.path('..', 'data', 'suitability', 'suitability_pca2_excluded.tif'))
suitability
country
country$geometry %>% plot()
mask_ctry <- country %>%
fasterize::fasterize(smod_2015) %>%
raster::crop(country)
# Crop the global SMOD layer to the country
smod_ctry_2015 <- smod_2015 %>%
raster::crop(mask_ctry) %>%
raster::mask(mask_ctry)
# Mark urban center (30) and dense urban cluster (23) as urban lands
urban_ctry_2015 <- (smod_ctry_2015>=23)
# Interpolate suitability to the country
suit_ctry <- suitability %>%
raster::resample(urban_ctry_2015, method='bilinear') %>%
# raster::mask(suitability) %>%
raster::mask(mask_ctry)
# Create directory for the country
dir.create(file.path('..', 'results', iso))
# Export urban land of the country in 2015
raster::writeRaster(urban_ctry_2015, overwrite=T,
filename=file.path('..', 'results', iso, 'urban_2015.tif'))
# Export urban suitability of the country
raster::writeRaster(suit_ctry, overwrite=T,
filename=file.path('..', 'results', iso, 'suitability.tif'))
>>>>>>> parent of 6df6700 (add urban_land_density.R)
